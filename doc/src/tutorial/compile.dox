/** @page compile Building PortAudio
@ingroup tutorial

PortAudio uses the [CMake build system](https://cmake.org/) and is built with standard CMake procedures. The instructions below apply the same to Linux, macOS, and Windows.

First, configure CMake to locate dependencies. From the top level of the source code repository, run:

    $ cmake -DCMAKE_INSTALL_PREFIX=/path/you/want/to/install/to -S . -B build
    
To compile PortAudio, run:
    
    $ cmake --build build

If you want to install PortAudio to the system, also run:

    $ cmake --install build
    
@section asio ASIO support on Windows

If you want ASIO support on Windows, download the [ASIO SDK](https://www.steinberg.net/asiosdk) from Steinberg and place it the same parent directory as the PortAudio source code (*not* inside the PortAudio source code directory). The ASIO SDK is available to download and use without charge but the license does not allow us (or you) to redistribute it. Both ASIO and the DirectX SDK are automatically searched for by the CMake script. If they are found, they will be enabled by default.

@section cmake_using Using PortAudio in your CMake project

If you installed PortAudio as described above in \ref cmake_building and the install prefix you used (CMAKE_INSTALL_PREFIX) is in your system PATH or CMAKE_MODULE_PATH CMake variable, linking your CMake project to PortAudio is simple:

    find_package(PortAudio)
    target_link_libraries(your-application-target PRIVATE PortAudio::PortAudio)

If you do not want to install portaudio into your system but would rather just have it get built as part of your own project, you may also use:

    add_subdirectory("path to PortAudio location" "${CMAKE_CURRENT_BINARY_DIR}/portaudio" EXCLUDE_FROM_ALL)
    target_link_libraries(your-application-target PRIVATE PortAudio)

EXCLUDE_FROM_ALL is not strictly necessary, but will ensure that targets which you don't use in your project won't get built.

Back to \ref tutorial_start

*/
